
# SPDX-FileCopyrightText: Copyright (c) 2024-2025, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_FORCE_HTTPS: "true"

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH =~ /^release\/.*$/

stages:
  - check
  - test
  - docs
  - package
  - upload

variables:
  BUILD_AIQ_COMPAT: "true"
  BUILD_NAT_COMPAT: "true"
  GIT_SUBMODULE_FORCE_HTTPS: "true"
  GIT_SUBMODULE_STRATEGY: recursive
  MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
  NAT_CI_ETCD_HOST: "etcd"
  NAT_CI_MILVUS_HOST: "milvus"
  NAT_CI_MYSQL_HOST: "mysql"
  NAT_CI_OPENSEARCH_URL: "http://opensearch:9200"
  NAT_CI_REDIS_HOST: "redis"
  NAT_CI_S3_HOST: "minio"
  UV_CACHE_DIR: .uv-cache
  WORKSPACE_TMP: "${CI_PROJECT_DIR}/.tmp"

default:
  image: ghcr.io/astral-sh/uv:python3.13-bookworm
  cache:
    - key: $CI_COMMIT_REF_SLUG
      paths:
        - $UV_CACHE_DIR
  before_script:
    - mkdir -p ${WORKSPACE_TMP}

  after_script:
    # Your `uv` commands
    - uv cache prune --ci

check:style:
  stage: check
  script:
    - echo "Runing checks"
    - ./ci/scripts/gitlab/checks.sh

  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  cache:
    key:
      files:
        - .pre-commit-config.yaml
    paths:
      - .cache/pre-commit

test:python_tests:
  stage: test
  services:
    - name: minio/minio:RELEASE.2025-07-18T21-56-31Z
      alias: minio
      command: ["server", "/data", "--console-address", ":9001"]
    - mysql:9.3
    - name: arizephoenix/phoenix:latest
      alias: phoenix
    - redis:7-alpine
    - name: quay.io/coreos/etcd:v3.5.5
      alias: etcd
      command: ["etcd", "--advertise-client-urls", "http://0.0.0.0:2379", "--listen-client-urls", "http://0.0.0.0:2379"]
    - name: milvusdb/milvus:v2.3.1
      alias: milvus
      variables:
        ETCD_ENDPOINTS: etcd:2379
        MINIO_ADDRESS: minio:9000
      command: ["milvus", "run", "standalone"]
    - name: opensearchproject/opensearch:2.11.1
      alias: opensearch
      variables:
        discovery.type: "single-node"
        plugins.security.disabled: "true"

  script:
    - echo "Running tests"
    - ./ci/scripts/gitlab/tests.sh
  coverage: /TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/
  artifacts:
    when: always
    reports:
      junit: pytest_junit_report*.xml
      coverage_report:
        coverage_format: cobertura  # or jacoco
        path: pytest_coverage_report*.xml

docs:build:
  stage: docs
  script:
    - echo "Building docs"
    - ./ci/scripts/gitlab/docs.sh
    # Copy the built docs to the public folder for artifact (required path for Gitlab Pages)
    - echo "Copying built docs to public folder for artifact"
    - cp -r docs/build/html public
  artifacts:
    paths:
      - public
    expire_in: 1 week

package:wheel:
  stage: package
  script:
    - echo "Building wheel"
    - ./ci/scripts/gitlab/build_wheel.sh
  artifacts:
    paths:
      # match - .tmp/wheels/nvidia-nat/<version>/*.whl, .tmp/wheels/nvidia-nat/nvidia-nat-crewai/<version>/*.whl etc.
      - .tmp/wheels/nvidia-nat/*/*/*.whl
      # Match the example wheels
      - .tmp/wheels/nvidia-nat/examples/*.whl
      # Match  the transitional wheels
      - .tmp/wheels/nat/*/*/*.whl
    expire_in: 1 week


upload:artifactory:
  stage: upload
  script:
    - echo "Uploading wheel to artifactory"
    - ./ci/scripts/gitlab/artifactory_upload.sh
  needs:
    - job: package:wheel
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_TAG

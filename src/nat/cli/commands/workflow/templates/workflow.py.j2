import logging

from nat.builder.builder import Builder
from nat.builder.function_info import FunctionInfo
from nat.builder.framework_enum import LLMFrameworkEnum
from nat.cli.register_workflow import register_function
from nat.data_models.function import FunctionBaseConfig
from pydantic import Field

logger = logging.getLogger(__name__)

class {{ workflow_class_name }}EchoConfig(FunctionBaseConfig, name="{{ python_safe_workflow_name }}_echo"):
    prefix: str = Field(default="Echo:", description="Prefix to add before the echoed text.")


@register_function(config_type={{ workflow_class_name }}EchoConfig, framework_wrappers=[LLMFrameworkEnum.LANGCHAIN])
async def register_{{ python_safe_workflow_name }}_echo(config: {{ workflow_class_name }}EchoConfig, builder: Builder):

    async def _echo(text: str) -> str:
        return f"{config.prefix} {text}"

    yield FunctionInfo.from_fn(
        _echo,
        description="This is a function that takes an input and echos back with a pre-defined prefix.")

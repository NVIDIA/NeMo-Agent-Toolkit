import logging

from pydantic import Field

from nat.builder.builder import Builder
from nat.builder.framework_enum import LLMFrameworkEnum
from nat.builder.framework_enum import LLMFrameworkEnum
from nat.builder.function_info import FunctionInfo
from nat.cli.register_workflow import register_function
from nat.data_models.function import FunctionBaseConfig

logger = logging.getLogger(__name__)


class {{ workflow_class_name }}(FunctionBaseConfig, name="{{ workflow_name }}"):
    """
    {{ workflow_description }}
    {{ workflow_description }}
    """
    prefix: str = Field(default="Echo:", description="Prefix to add before the echoed text.")
    prefix: str = Field(default="Echo:", description="Prefix to add before the echoed text.")


@register_function(config_type={{ workflow_class_name }}, framework_wrappers=[LLMFrameworkEnum.LANGCHAIN])
async def {{ python_safe_workflow_name }}_function(config: {{ workflow_class_name }}, builder: Builder):

    async def _echo(text: str) -> str:
        """
        This is the part where all the logic for the function goes.
        """
        return f"{config.prefix} {text}"

    # This is the part where the function is registered. The description parameter is used to describe the function.
    yield FunctionInfo.from_fn(
        _echo, description="This is a function that takes an input and echos back with a pre-defined prefix.")
